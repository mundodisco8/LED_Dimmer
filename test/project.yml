---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.1
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - ../src/Gruffalo_Dimmer/**
    - ../src/Gruffalo_Dimmer/inc/**
  :support:
    - test/support
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
    - BGM220PC22WGA=1
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :utilities:
    - gcovr           # Use gcovr to create the specified reports (default).
    - ReportGenerator # Use ReportGenerator to create the specified reports.
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90
    :print_summary: true
    :report_include: "^../src/Gruffalo_Dimmer/src.*"
  :report_generator:
    # Optional plugin files for custom reports or custom history storage (separated by semicolon).
    # :plugins: CustomReports.dll

    # Optional list of assemblies that should be included or excluded in the report (separated by semicolon)..
    # Exclusion filters take precedence over inclusion filters.
    # Wildcards are allowed, but not regular expressions.
    # :assembly_filters: "+Included;-Excluded"

    # Optional list of classes that should be included or excluded in the report (separated by semicolon)..
    # Exclusion filters take precedence over inclusion filters.
    # Wildcards are allowed, but not regular expressions.
    # :class_filters: "+Included;-Excluded"

    # Optional list of files that should be included or excluded in the report (separated by semicolon)..
    # Exclusion filters take precedence over inclusion filters.
    # Wildcards are allowed, but not regular expressions.
    # :file_filters: "-./vendor/*;-./build/*;-./test/*;-./lib/*;+./src/*"

    # The verbosity level of the log messages.
    # Values: Verbose, Info, Warning, Error, Off
    # :verbosity: debug

    # Optional tag or build version.
    # :tag: <tag>

    # Optional list of one or more regular expressions to exclude gcov notes files that match these filters.
    # :gcov_exclude:
    #   - <exclude_regex1>
    #   - <exclude_regex2>

    # Optionally use a particular gcov executable. Defaults to gcov.
    # :gcov_executable: <gcov_cmd>

    # Optionally set the number of threads to use in parallel. Defaults to 1.
    # :num_parallel_threads: 12

    # Optional list of one or more command line arguments to pass to Report Generator.
    # Useful for configuring Risk Hotspots and Other Settings.
    # https://github.com/danielpalme/ReportGenerator/wiki/Settings
    # :custom_args:
    #   - <custom_arg1>
    #   - <custom_arg2>

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# Add debugging info to the tests
:flags:
  :test:
    :compile:
      :*: # use :*: for all sources.
        - -g3
        - -O0

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - xml_tests_report
    - gcov
...
